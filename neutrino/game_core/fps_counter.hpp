#ifndef FRAMEWORK_GAME_CORE_FPS_COUNTER_HPP
#define FRAMEWORK_GAME_CORE_FPS_COUNTER_HPP

#include <atomic>
#include <thread>

namespace framework::game_core
{
////////////////////////////////////////////////////////////////////////////////
/// @addtogroup game_core_module
/// @{
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
/// @brief Fps counter
////////////////////////////////////////////////////////////////////////////////
class FpsCounter final
{
public:
    ////////////////////////////////////////////////////////////////////////////
    /// @brief Creates FpsCounter
    ////////////////////////////////////////////////////////////////////////////
    FpsCounter();

    ////////////////////////////////////////////////////////////////////////////
    /// @brief Destructor
    ////////////////////////////////////////////////////////////////////////////
    ~FpsCounter();

    ////////////////////////////////////////////////////////////////////////////
    /// @brief FpsCounter can't be copied
    ////////////////////////////////////////////////////////////////////////////
    FpsCounter(const FpsCounter&) = delete;

    ////////////////////////////////////////////////////////////////////////////
    /// @brief FpsCounter can't be copied
    ////////////////////////////////////////////////////////////////////////////
    FpsCounter& operator=(const FpsCounter&) = delete;

    ////////////////////////////////////////////////////////////////////////////
    /// @brief Count a frame.
    ///
    /// Should be called once per frame.
    ////////////////////////////////////////////////////////////////////////////
    void tick();

    ////////////////////////////////////////////////////////////////////////////
    /// @brief Frames per second.
    ///
    /// @return Frames count.
    ////////////////////////////////////////////////////////////////////////////
    std::uint32_t fps() const;

    ////////////////////////////////////////////////////////////////////////////
    /// @brief Total frames count.
    ///
    /// @return Total frames count.
    ////////////////////////////////////////////////////////////////////////////
    std::uint32_t total_fames() const;

private:
    void slice_fps();

    std::atomic<bool> m_should_stop           = false;
    std::atomic<std::uint32_t> m_frames_total = 0;
    std::atomic<std::uint32_t> m_frames       = 0;
    std::atomic<std::uint32_t> m_fps          = 0;
    std::thread m_fps_thread;
};

////////////////////////////////////////////////////////////////////////////////
/// @}
////////////////////////////////////////////////////////////////////////////////
} // namespace framework::game_core

#endif
